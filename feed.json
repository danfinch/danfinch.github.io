{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dan Finch",
    "description": "",
    "home_page_url": "https://da.nfin.ch",
    "feed_url": "https://da.nfin.ch/feed.json",
    "user_comment": "",
    "author": {
        "name": "Dan"
    },
    "items": [
        {
            "id": "https://da.nfin.ch/contact/",
            "url": "https://da.nfin.ch/contact/",
            "title": "Contact Me",
            "summary": "I am available for consulting and can be reached at danfinch@outlook.com. The&hellip;",
            "content_html": "<p>I am available for consulting and can be reached at <a href=\"mailto:danfinch@outlook.com\">danfinch@outlook.com</a>.</p>\n<p>The only social media account I maintain is at <a href=\"https://www.github.com/danfinch\">my old GitHub profile</a>. Newer work samples will be provided upon request.</p>\n<p>My one-page résumé is available to <a href=\"https://da.nfin.ch/media/files/Dan Finch - Résumé.pdf\">download in PDF</a>.</p>",
            "author": {
                "name": "Dan"
            },
            "tags": [
            ],
            "date_published": "2021-09-14T21:38:50-07:00",
            "date_modified": "2021-09-14T23:23:26-07:00"
        },
        {
            "id": "https://da.nfin.ch/experience/",
            "url": "https://da.nfin.ch/experience/",
            "title": "Experience",
            "summary": "Independent Consultant Dec 2017 – Present (Remote) My recent work has involved&hellip;",
            "content_html": "<h4 class=\"western\"><strong>Independent Consultant</strong></h4>\n<h6 class=\"western\">Dec 2017 – Present (Remote)</h6>\n<p class=\"western\">My recent work has involved the ingestion and visualization of scientific measurements as well as work in novel programming languages.</p>\n<h4 class=\"western\"><strong>RiskLens</strong> – Senior Software Engineer</h4>\n<h6 class=\"western\">Jun 2017 – Dec 2017 (Spokane, WA)</h6>\n<p class=\"western\">Helped lead the front-end development of FAIR-U - a React + Redux-based app &amp; transitioned the team to TypeScript and other modern front-end tools. Gained experience with a security-focused and process-intensive team.</p>\n<h4 class=\"western\"><strong>Independent Consultant</strong></h4>\n<h6 class=\"western\">Dec 2014 – Jun 2017 (Remote)</h6>\n<p class=\"western\">Performed work for various startup and corporate clients, focusing on IOT projects.</p>\n<h4 class=\"western\"><strong>TenX Logic</strong> – Contract Developer</h4>\n<h6 class=\"western\">Oct 2015 – Mar 2016 (Remote)</h6>\n<p class=\"western\">This project for the oil + gas industry targeted the Mono platform on ARM processors. I designed and implemented a C#-based driver model to control equipment in the field.</p>\n<h4 class=\"western\"><strong>Kochava</strong> – Senior Developer</h4>\n<h6 class=\"western\">Apr 2014 – Nov 2014 (Sandpoint, ID)</h6>\n<p class=\"western\">Worked on infrastructure and systems to manage large volumes of real-time analytics data. I tackled complex challenges requiring constant inventiveness and collaboration to help the company scale at a rapid rate.</p>\n<p>My work centered around Node.js, Redis, Linux, and MongoDB. I also led the early implementation of a scalable high-traffic analytics backend.</p>\n<h4 class=\"western\"><strong>Coldwater Creek</strong> – Web Developer</h4>\n<h6 class=\"western\">Oct 2012 – Apr 2014 (Sandpoint, ID)</h6>\n<p class=\"western\">Worked with many teams to finish an amazing number of projects. My work on both internal tooling and customer experience put the company ahead of its industry in many respects.</p>\n<ul>\n<li>Implemented a novel infinite scrolling method and product search which outperformed all competitors.</li>\n<li>Provided an array of features and user interfaces widgets for website with around one million hits per day.</li>\n<li>Wrote or re-wrote around 30 internal web-driven tools for e-commerce &amp; marketing teams.</li>\n<li>Wrote custom jQuery UI powered framework and widgets for tool suite.</li>\n<li>Initiated effort to significantly improve client-side page load performance.</li>\n<li>Created a framework allowing mutual embedding between MVC and WebForms to allow a smooth transition off of legacy code.</li>\n</ul>\n<h4 class=\"western\"><strong>Promitheia</strong> – Technical Director</h4>\n<h6 class=\"western\">Sep 2006 – Sep 2012 (Austin, TX)</h6>\n<p class=\"western\">As co-founder of this startup I was responsible for software design, programming, project management, operations, testing, maintenance, and security.</p>\n<ul>\n<li>Created complex e-commerce website featuring retail and affiliate marketing management. Owner of dozens of projects within the company.</li>\n<li>Configured and managed production web servers including Microsoft IIS and LAMP stack.</li>\n<li>Worked closely with DBA on data-driven applications powered by SQL Server 2008 and ADO.NET.</li>\n<li>Developed solutions using Service Oriented Architecture (SOA), WCF, and Windows services. Integrated software with various cloud data and web service providers, including AWS, Authorize.NET, and Zencoder.</li>\n<li>Studied and implemented e-commerce best practices, web security standards, and PCI compliance.</li>\n<li>Analyzed and selected supporting software and services, including early adoption of technologies such as ASP.NET MVC, jQuery, Amazon Web Services, and distributed source control.</li>\n</ul>",
            "author": {
                "name": "Dan"
            },
            "tags": [
            ],
            "date_published": "2021-09-14T21:17:22-07:00",
            "date_modified": "2021-09-14T21:30:54-07:00"
        },
        {
            "id": "https://da.nfin.ch/pre-modern-hyperscript/",
            "url": "https://da.nfin.ch/pre-modern-hyperscript/",
            "title": "Pre-modern Hyperscript",
            "summary": "I was working at Promitheia during the first days of “Web 2.0”.",
            "content_html": "<p>I was working at Promitheia during the first days of “Web 2.0”. AJAX was very popular but the tools to fill the gap between dynamic and static sites were not yet around. Server side rendering was necessary, but I still wanted to provide very interactive pages without adding a completely different client-side framework for rendering markup.</p>\n<p>I settled on what some called AHAH - Asynchronous HTML And HTTP - where the server rendered partial views via XMLHttpRequests which were inserted into the DOM. I made use of a number of non-standard HTML attributes to declaratively wire up these insertions. As a result very few widgets needed custom code. jQuery was patched at startup to rebind events when content was inserted. I was able to achieve performant and flashy interactions with careful use of jQuery (it is possible!) long before they became commonplace.</p>\n<p>Working with views in ASP.NET prior to the release of Razor was painful: unmaintainable soup markup was everywhere. As a result, many people were creating their own view engines. I did not have the bandwidth to create and maintain a custom view engine, let alone make it work with the IDE. </p>\n<p>I decided to create a C#-based fluent DSL and write the views directly in the host language itself. People now call this hyperscript, and it is fairly common, but at the time (2008-ish), other programmers thought I was insane! This had many benefits - I did not have two syntaxes mixed up in the same file, I had all the support of my IDE (autocomplete, type checking), and I could package components as DLL files. Layout views could simply be written as methods with parameters for the “holes”.</p>\n<p>In debug mode my view engine would set up a file watcher and auto-reload views as I worked on them; another perk which was scoffed at then but is now looked at as a standard feature of a web stack.</p>\n",
            "author": {
                "name": "Dan"
            },
            "tags": [
                   "Stories"
            ],
            "date_published": "2021-09-14T19:54:05-07:00",
            "date_modified": "2021-09-14T19:56:54-07:00"
        },
        {
            "id": "https://da.nfin.ch/a-standing-ovation/",
            "url": "https://da.nfin.ch/a-standing-ovation/",
            "title": "A Standing Ovation",
            "summary": "Between major projects at Coldwater Creek I was asked to rewrite a&hellip;",
            "content_html": "<p>Between major projects at Coldwater Creek I was asked to rewrite a tool used by associates at our many retail locations. This was primarily used to look up products when a customer brought in a return. It was difficult to use as we had about 5 or so different types of SKUs for each product. Some were not supported by the tool and those that were had to be entered just right.</p>\n<p>The existing tool was written in ASP.NET 1.0 about 10 years prior and it was not possible to bring it into a newer framework. To avoid working with the spaghettified nightmare of Web Forms I spent about an hour writing a reflection-based MVC engine which lived inside a .ashx handler file. I created a more modern UI and made sure the SQL query was flexible enough to find any product by any of its SKUs.</p>\n<p>This took about a day and a half, it was released, and I heard nothing more about it. About a month later my manager came over to my desk and said “you got a minute? come with me”. I followed him downstairs to a conference room filled with about 200 people and we walked to the front. He said “this is Dan, he rewrote the product lookup tool”. The crowd erupted into applause and cheering. It turned out to be a meeting of our retail location managers and apparently I had eliminated one of their biggest headaches!</p>\n",
            "author": {
                "name": "Dan"
            },
            "tags": [
                   "Stories"
            ],
            "date_published": "2021-09-14T19:53:38-07:00",
            "date_modified": "2021-09-14T19:56:59-07:00"
        },
        {
            "id": "https://da.nfin.ch/coldwater-creek-product-catalog/",
            "url": "https://da.nfin.ch/coldwater-creek-product-catalog/",
            "title": "Coldwater Creek Product Catalog",
            "summary": "The Problem The project was explained to me as adding infinite scrolling&hellip;",
            "content_html": "<h2 id=\"the-problem\">The Problem</h2>\n<p>The project was explained to me as adding infinite scrolling and some faceted search features to our product catalog. While researching and planning I soon realized these requirements meant a complete rewrite of the product catalog. The shape of our data in SQL Server was not at all amenable to faceted search. Another difficulty was that my manager was exiting and there seemed to be no single person in charge of the project, leaving me to fill in a lot of blanks.</p>\n<p>Our existing catalog used a categorization system which required the content team to compose filters in a strange DSL:</p>\n<pre><code>  Attribute&lt;Type&gt;(&#39;Pants&#39;)\n  =&gt;Attribute&lt;Color&gt;(&#39;Blue&#39;)\n</code></pre>\n<p>The syntax of this language seemed arbitrarily complex and the parser was very touchy. Several hundred of these filters were translated dynamically at run-time (and quite slowly) to LINQ-to-SQL expression trees and then run against SQL Server to collect products matching the criteria. Often, heavy traffic would cause this to take down our servers - the SQL queries generated were sometimes many thousands of characters long.</p>\n<p>My testing demonstrated that even if this query performance problem was solved, response times from DB to app servers would still be a major bottleneck. I was part of a conservative Microsoft stack team and putting caching layers like Redis and memcached between DB and app was a very hard sell.</p>\n<h2 id=\"server-side\">Server Side</h2>\n<p>To implement a caching layer without raising any eyebrows, I simply pulled the entire product catalog into memory and put it behind an ASP.NET web service, using standard .NET collections to index it. A single, small VM in each datacenter would suffice as our cache, and our team would be capable of maintaining it without learning any scary open source tech!</p>\n<p>To make life better for the content team I both rewrote the old expression tree parser to be less brittle and added a new DSL so new filters were legible to the non-technical users:</p>\n<pre><code>  Type = Pants\n  and Color = Blue\n</code></pre>\n<p>Compiling these to LINQ-to-SQL still performed poorly, and the code was difficult to maintain. Instead, I generated raw T-SQL using Common Table Expressions. All filters were parsed and run at cache startup, taking about 15 seconds to run the hundreds of queries and index the entire catalog. Faceted search was then done with the in-memory collections rather than the relational tables, giving instant results. We would have been able to spin down about 80% of our web servers had this gone into production. Unfortunately, the company announced it was liquidating shortly before launch.</p>\n<h2 id=\"client-side\">Client Side</h2>\n<p>I had never actually used an infinite scroll feature which met my usability standards. Most of our direct competitors had implemented this, and all were slow or buggy. All the existing techniques I looked into had big flaws. We had the specific requirement: “if the user clicks the back button, she should wind up back at the same part of the infinite scroll she left”. The few existing implementations which met this requirement were essentially hacks, and did not work reliably.</p>\n<p>Realizing that all browsers have this “where I left off” feature built-in for static pages, my solution was to pre-calculate and insert the CSS height of the entire results element at the server, where we knew 1) the fixed height of each result, and 2) how many results were on the page. Results were still fetched dynamically, but the user would <em>instantly</em> be where she left off when returning to the results. And no awkwardly shrinking/jumping scrollbar! I have yet to find this technique used anywhere else.</p>\n<p>When complete, I could go to our “All Products” listing, hold down the Page Down button, and see the entire product catalog fly past in a matter of seconds.</p>\n",
            "author": {
                "name": "Dan"
            },
            "tags": [
                   "Stories"
            ],
            "date_published": "2021-09-14T19:46:09-07:00",
            "date_modified": "2021-09-14T19:56:49-07:00"
        },
        {
            "id": "https://da.nfin.ch/about-me/",
            "url": "https://da.nfin.ch/about-me/",
            "title": "About Me",
            "summary": "I’ve learned to make code small, simple, and readable. I gravitate towards&hellip;",
            "content_html": "<p>I’ve learned to make code <strong>small, simple, and readable</strong>. I gravitate towards functional and language-oriented-programming. Good use of rich type systems, run-time reflection, and declarative APIs can help reduce ceremony, spaghetti code, and bugs.</p>\n<p>I love building and fixing systems so they can be managed simply and quickly improved upon.</p>\n<p>As a programmer, my first principle is <strong>user experience</strong>. Like most of us, I am disappointed by lousy software every day, and I use that dissatisfaction to set a high standard for my work. The first end user is the next person who must understand and add to the code.</p>\n",
            "author": {
                "name": "Dan"
            },
            "tags": [
            ],
            "date_published": "2021-09-14T19:40:33-07:00",
            "date_modified": "2021-09-14T20:25:04-07:00"
        }
    ]
}
